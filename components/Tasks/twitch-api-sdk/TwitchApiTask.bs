sub init()
end sub

function GetRandomUUID()
    di = CreateObject("roDeviceInfo")
    return di.GetRandomUUID()
end function

function getDeviceLocale()
    di = CreateObject("roDeviceInfo")
    return di.GetCurrentLocale().Replace("_", "-")
end function

function TwitchGraphQLRequest(data)
    access_token = invalid
    device_code = invalid
    ' doubled up here in stead of defaulting to "" because access_token is dependent on device_code
    if get_user_setting("device_code") <> invalid
        device_code = get_user_setting("device_code")
        if get_user_setting("access_token") <> invalid
            access_token = "OAuth " + get_user_setting("access_token")
        end if
    else
        return invalid
    end if
    reqHeaders = {
        "Accept": "*/*"
        "Client-Id": "ue6666qo983tsx6so1t0vnawi233wa"
        "Device-ID": device_code
        "Origin": "https://switch.tv.twitch.tv"
        "Referer": "https://switch.tv.twitch.tv/"
        "Accept-Language": getDeviceLocale()
    }
    if access_token <> invalid
        reqHeaders["Authorization"] = access_token
    end if
    req = HttpRequest({
        url: "https://gql.twitch.tv/gql"
        headers: reqHeaders
        method: "POST"
        data: data
    })
    rsp = ParseJSON(req.send())
    return rsp
end function

function getHomePageQuery() as object
    rsp = TwitchGraphQLRequest(`{
            "query":"query Homepage_Query(
                $itemsPerRow: Int!
                $limit: Int!
                $platform: String!
                $requestID: String!
                ) {
                currentUser {
                    id
                    __typename
                    login
                    roles {
                    isStaff
                    }
                }
                shelves(itemsPerRow: $itemsPerRow, first: $limit, platform: $platform, requestID: $requestID) {
                    edges {
                    node {
                        id
                        __typename
                        title {
                        fallbackLocalizedTitle
                        localizedTitleTokens {
                            node {
                            __typename
                            ... on Game {
                                __typename
                                displayName
                                name
                            }
                            ... on TextToken {
                                __typename
                                text
                                location
                            }
                            }
                        }
                        }
                        trackingInfo {
                        reasonTarget
                        reasonTargetType
                        reasonType
                        rowName
                        }
                        content {
                        edges {
                            trackingID
                            node {
                            __typename
                            __isShelfContent: __typename
                            ... on Stream {
                                id
                                __typename
                                previewImageURL
                                broadcaster {
                                displayName
                                broadcastSettings {
                                    title
                                    id
                                    __typename
                                }
                                id
                                __typename
                                }
                                game {
                                displayName
                                boxArtURL
                                id
                                __typename
                                }
                                ...FocusableStreamCard_stream
                            }
                            ... on Game {
                                ...FocusableCategoryCard_category
                                id
                                __typename
                                streams(first: 1) {
                                edges {
                                    node {
                                    id
                                    __typename
                                    previewImageURL
                                    broadcaster {
                                        displayName
                                        broadcastSettings {
                                        title
                                        id
                                        __typename
                                        }
                                        id
                                        __typename
                                    }
                                    game {
                                        displayName
                                        boxArtURL
                                        id
                                        __typename
                                    }
                                    }
                                }
                                }
                            }
                            }
                        }
                        }
                    }
                    }
                }
                }

                fragment FocusableCategoryCard_category on Game {
                name
                id
                __typename
                displayName
                viewersCount
                boxArtURL
                }

                fragment FocusableStreamCard_stream on Stream {
                broadcaster {
                    displayName
                    login
                    hosting {
                    id
                    __typename
                    }
                    broadcastSettings {
                    title
                    id
                    __typename
                    }
                    profileImageURL(width: 50)
                    id
                    __typename
                }
                game {
                    displayName
                    name
                    id
                    __typename
                }
                id
                __typename
                previewImageURL
                type
                viewersCount
            }",
            "variables":{
                "itemsPerRow":20,
                "limit":8,
                "platform":"switch_web_tv",
                "requestID":"${getRandomUUID()}"
            }
        }`)
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getCategoryQuery() as object
    rsp = TwitchGraphQLRequest({
        query: "query GameDirectory_Query(" + chr(34) + "  $gameAlias: String!" + chr(34) + "  $channelsCount: Int!" + chr(34) + ") {" + chr(34) + "  currentUser {" + chr(34) + "    id" + chr(34) + "    __typename" + chr(34) + "    login" + chr(34) + "    roles {" + chr(34) + "      isStaff" + chr(34) + "    }" + chr(34) + "  }" + chr(34) + "  game(name: $gameAlias) {" + chr(34) + "    boxArtURL" + chr(34) + "    displayName" + chr(34) + "    name" + chr(34) + "    streams(first: $channelsCount) {" + chr(34) + "      edges {" + chr(34) + "        node {" + chr(34) + "          id" + chr(34) + "          __typename" + chr(34) + "          previewImageURL" + chr(34) + "          ...FocusableStreamCard_stream" + chr(34) + "        }" + chr(34) + "      }" + chr(34) + "    }" + chr(34) + "    id" + chr(34) + "    __typename" + chr(34) + "  }" + chr(34) + "}" + chr(34) + "" + chr(34) + "fragment FocusableStreamCard_stream on Stream {" + chr(34) + "  broadcaster {" + chr(34) + "    displayName" + chr(34) + "    login" + chr(34) + "    hosting {" + chr(34) + "      id" + chr(34) + "      __typename" + chr(34) + "    }" + chr(34) + "    broadcastSettings {" + chr(34) + "      title" + chr(34) + "      id" + chr(34) + "      __typename" + chr(34) + "    }" + chr(34) + "    profileImageURL(width: 50)" + chr(34) + "    id" + chr(34) + "    __typename" + chr(34) + "  }" + chr(34) + "  game {" + chr(34) + "    displayName" + chr(34) + "    name" + chr(34) + "    id" + chr(34) + "    __typename" + chr(34) + "  }" + chr(34) + "  id" + chr(34) + "  __typename" + chr(34) + "  previewImageURL" + chr(34) + "  type" + chr(34) + "  viewersCount" + chr(34) + "}" + chr(34) + ""
        variables: {
            "channelsCount": 40
            "gameAlias": m.top.request.params.id
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getStreamPlayerQuery()
    rsp = TwitchGraphQLRequest({
        query: "query StreamPlayer_Query(" + chr(10) + "  $login: String!" + chr(10) + "  $playerType: String!" + chr(10) + "  $platform: String!" + chr(10) + "  $skipPlayToken: Boolean!" + chr(10) + ") {" + chr(10) + "  ...StreamPlayer_token" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment StreamPlayer_token on Query {" + chr(10) + "  user(login: $login) {" + chr(10) + "    login" + chr(10) + "    stream @skip(if: $skipPlayToken) {" + chr(10) + "      playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {" + chr(10) + "        signature" + chr(10) + "        value" + chr(10) + "      }" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "}" + chr(10) + ""
        variables: {
            "login": m.top.request.params.id
            "platform": "switch_web_tv"
            "playerType": "pulsar"
            "skipPlayToken": false
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getVodPlayerWrapperQuery() as object
    rsp = TwitchGraphQLRequest({
        query: "query VodPlayerWrapper_Query(" + chr(10) + "  $videoId: ID!" + chr(10) + "  $platform: String!" + chr(10) + "  $playerType: String!" + chr(10) + "  $skipPlayToken: Boolean!" + chr(10) + ") {" + chr(10) + "  ...VodPlayerWrapper_token" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment VodPlayerWrapper_token on Query {" + chr(10) + "  video(id: $videoId) @skip(if: $skipPlayToken) {" + chr(10) + "    playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {" + chr(10) + "      signature" + chr(10) + "      value" + chr(10) + "    }" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "}" + chr(10) + ""
        variables: {
            "videoId": m.top.request.params.id
            "platform": "switch_web_tv"
            "playerType": "pulsar"
            "skipPlayToken": false
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function


function getChannelInterstitialQuery() as object
    rsp = TwitchGraphQLRequest({
        query: "query ChannelInterstitial_Query(" + chr(10) + "  $login: String!" + chr(10) + "  $platform: String!" + chr(10) + "  $playerType: String!" + chr(10) + "  $skipPlayToken: Boolean!" + chr(10) + ") {" + chr(10) + "  channel: user(login: $login) {" + chr(10) + "    ...InterstitialLayout_channel" + chr(10) + "    ...StreamDetails_channel" + chr(10) + "    ...StreamPlayer_channel" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    displayName" + chr(10) + "    broadcastSettings {" + chr(10) + "      isMature" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    stream {" + chr(10) + "      restrictionType" + chr(10) + "      self {" + chr(10) + "        canWatch" + chr(10) + "      }" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "      type" + chr(10) + "    }" + chr(10) + "    hosting {" + chr(10) + "      displayName" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "      login" + chr(10) + "      stream {" + chr(10) + "        id" + chr(10) + "        __typename" + chr(10) + "        type" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  currentUser {" + chr(10) + "    ...StreamPlayer_currentUser" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    roles {" + chr(10) + "      isStaff" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  ...StreamPlayer_token" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment BroadcasterOverview_channel on User {" + chr(10) + "  login" + chr(10) + "  displayName" + chr(10) + "  followers {" + chr(10) + "    totalCount" + chr(10) + "  }" + chr(10) + "  primaryColorHex" + chr(10) + "  primaryTeam {" + chr(10) + "    displayName" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  profileImageURL(width: 70)" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment ChannelDescription_channel on User {" + chr(10) + "  description" + chr(10) + "  displayName" + chr(10) + "  login" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableFollowButton_channel on User {" + chr(10) + "  login" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  self {" + chr(10) + "    follower {" + chr(10) + "      followedAt" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment InterstitialButtonRow_channel on User {" + chr(10) + "  ...FocusableFollowButton_channel" + chr(10) + "  login" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment InterstitialLayout_channel on User {" + chr(10) + "  ...BroadcasterOverview_channel" + chr(10) + "  ...ChannelDescription_channel" + chr(10) + "  ...InterstitialButtonRow_channel" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment StreamDetails_channel on User {" + chr(10) + "  broadcastSettings {" + chr(10) + "    game {" + chr(10) + "      boxArtURL" + chr(10) + "      displayName" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    title" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  stream {" + chr(10) + "    viewersCount" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment StreamPlayer_channel on User {" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  login" + chr(10) + "  roles {" + chr(10) + "    isPartner" + chr(10) + "  }" + chr(10) + "  self {" + chr(10) + "    subscriptionBenefit {" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  stream {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    game {" + chr(10) + "      name" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    previewImageURL" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment StreamPlayer_currentUser on User {" + chr(10) + "  hasTurbo" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment StreamPlayer_token on Query {" + chr(10) + "  user(login: $login) {" + chr(10) + "    login" + chr(10) + "    stream @skip(if: $skipPlayToken) {" + chr(10) + "      playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {" + chr(10) + "        signature" + chr(10) + "        value" + chr(10) + "      }" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "}" + chr(10) + ""
        variables: {
            "login": m.top.request.params.id
            "platform": "switch_web_tv"
            "playerType": "pulsar"
            "skipPlayToken": true
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getChannelHomeQuery() as object
    rsp = TwitchGraphQLRequest({
        query: "query ChannelHome_Query(" + chr(10) + "  $login: String!" + chr(10) + "  $platform: String!" + chr(10) + "  $playerType: String!" + chr(10) + "  $skipPlayToken: Boolean!" + chr(10) + ") {" + chr(10) + "  channel: user(login: $login) {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    stream {" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    videoShelves {" + chr(10) + "      edges {" + chr(10) + "        node {" + chr(10) + "          id" + chr(10) + "          __typename" + chr(10) + "          title" + chr(10) + "          items {" + chr(10) + "            __typename" + chr(10) + "            __isVideoShelfItem: __typename" + chr(10) + "            ... on Clip {" + chr(10) + "              ...FocusableClipCard_clip" + chr(10) + "            }" + chr(10) + "            ... on Video {" + chr(10) + "              ...FocusableVodCard_video" + chr(10) + "            }" + chr(10) + "          }" + chr(10) + "        }" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "    ...ProfileBanner_channel" + chr(10) + "  }" + chr(10) + "  currentUser {" + chr(10) + "    ...ProfileBanner_currentUser" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    roles {" + chr(10) + "      isStaff" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  ...StreamPlayer_token" + chr(10) + "  ...VodPreviewPlayerWrapper_previewToken" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment BannerButtonsRow_channel on User {" + chr(10) + "  ...FocusableFollowButton_channel" + chr(10) + "  displayName" + chr(10) + "  hosting {" + chr(10) + "    displayName" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    stream {" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "      type" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  login" + chr(10) + "  stream {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    type" + chr(10) + "  }" + chr(10) + "  videos(first: 1, sort: TIME) {" + chr(10) + "    edges {" + chr(10) + "      node {" + chr(10) + "        id" + chr(10) + "        __typename" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment BannerChannelStatus_channel on User {" + chr(10) + "  displayName" + chr(10) + "  hosting {" + chr(10) + "    displayName" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    stream {" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "      type" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  login" + chr(10) + "  stream {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    type" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment DefaultPreviewContent_channel on User {" + chr(10) + "  ...SwitchPreviewContent_channel" + chr(10) + "  ...StreamPreviewPlayer_channel" + chr(10) + "  hosting {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    stream {" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "      type" + chr(10) + "      viewersCount" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  login" + chr(10) + "  stream {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    type" + chr(10) + "    viewersCount" + chr(10) + "  }" + chr(10) + "  videos(first: 1, sort: TIME) {" + chr(10) + "    edges {" + chr(10) + "      node {" + chr(10) + "        id" + chr(10) + "        __typename" + chr(10) + "        previewThumbnailURL" + chr(10) + "        ...VodPreviewPlayer_video" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment DefaultPreviewContent_currentUser on User {" + chr(10) + "  ...StreamPreviewPlayer_currentUser" + chr(10) + "  ...VodPreviewPlayer_currentUser" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableClipCard_clip on Clip {" + chr(10) + "  broadcaster {" + chr(10) + "    login" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  createdAt" + chr(10) + "  durationSeconds" + chr(10) + "  game {" + chr(10) + "    boxArtURL" + chr(10) + "    displayName" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  slug" + chr(10) + "  thumbnailURL" + chr(10) + "  title" + chr(10) + "  viewCount" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableFollowButton_channel on User {" + chr(10) + "  login" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  self {" + chr(10) + "    follower {" + chr(10) + "      followedAt" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableVodCard_video on Video {" + chr(10) + "  createdAt" + chr(10) + "  lengthSeconds" + chr(10) + "  game {" + chr(10) + "    boxArtURL" + chr(10) + "    displayName" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  previewThumbnailURL" + chr(10) + "  self {" + chr(10) + "    viewingHistory {" + chr(10) + "      position" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  title" + chr(10) + "  viewCount" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment ProfileBanner_channel on User {" + chr(10) + "  ...BannerButtonsRow_channel" + chr(10) + "  ...BannerChannelStatus_channel" + chr(10) + "  ...SwitchPreviewContent_channel" + chr(10) + "  ...DefaultPreviewContent_channel" + chr(10) + "  description" + chr(10) + "  displayName" + chr(10) + "  followers {" + chr(10) + "    totalCount" + chr(10) + "  }" + chr(10) + "  hosting {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    profileImageURL(width: 150)" + chr(10) + "  }" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  login" + chr(10) + "  profileImageURL(width: 150)" + chr(10) + "  profileViewCount" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment ProfileBanner_currentUser on User {" + chr(10) + "  ...DefaultPreviewContent_currentUser" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment StreamPlayer_channel on User {" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  login" + chr(10) + "  roles {" + chr(10) + "    isPartner" + chr(10) + "  }" + chr(10) + "  self {" + chr(10) + "    subscriptionBenefit {" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  stream {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    game {" + chr(10) + "      name" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    previewImageURL" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment StreamPlayer_currentUser on User {" + chr(10) + "  hasTurbo" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment StreamPlayer_token on Query {" + chr(10) + "  user(login: $login) {" + chr(10) + "    login" + chr(10) + "    stream @skip(if: $skipPlayToken) {" + chr(10) + "      playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {" + chr(10) + "        signature" + chr(10) + "        value" + chr(10) + "      }" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment StreamPreviewPlayer_channel on User {" + chr(10) + "  hosting {" + chr(10) + "    ...StreamPlayer_channel" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    stream {" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "      type" + chr(10) + "      viewersCount" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  ...StreamPlayer_channel" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  login" + chr(10) + "  stream {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    type" + chr(10) + "    viewersCount" + chr(10) + "    restrictionType" + chr(10) + "    self {" + chr(10) + "      canWatch" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  displayName" + chr(10) + "  broadcastSettings {" + chr(10) + "    isMature" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment StreamPreviewPlayer_currentUser on User {" + chr(10) + "  ...StreamPlayer_currentUser" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment SwitchPreviewContent_channel on User {" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  login" + chr(10) + "  stream {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    previewImageURL" + chr(10) + "  }" + chr(10) + "  videos(first: 1, sort: TIME) {" + chr(10) + "    edges {" + chr(10) + "      node {" + chr(10) + "        id" + chr(10) + "        __typename" + chr(10) + "        previewThumbnailURL" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment VodPlayerBase_currentUser on User {" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  hasTurbo" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment VodPlayerBase_video on Video {" + chr(10) + "  broadcastType" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  game {" + chr(10) + "    name" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  owner {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    roles {" + chr(10) + "      isPartner" + chr(10) + "    }" + chr(10) + "    self {" + chr(10) + "      subscriptionBenefit {" + chr(10) + "        id" + chr(10) + "        __typename" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  self {" + chr(10) + "    viewingHistory {" + chr(10) + "      position" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment VodPlayerOverlay_video on Video {" + chr(10) + "  createdAt" + chr(10) + "  lengthSeconds" + chr(10) + "  viewCount" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment VodPreviewPlayerWrapper_previewToken on Query {" + chr(10) + "  user(login: $login) @skip(if: $skipPlayToken) {" + chr(10) + "    videos(first: 1) {" + chr(10) + "      edges {" + chr(10) + "        node {" + chr(10) + "          playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {" + chr(10) + "            signature" + chr(10) + "            value" + chr(10) + "          }" + chr(10) + "          id" + chr(10) + "          __typename" + chr(10) + "        }" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment VodPreviewPlayer_currentUser on User {" + chr(10) + "  ...VodPlayerBase_currentUser" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment VodPreviewPlayer_video on Video {" + chr(10) + "  ...VodPlayerBase_video" + chr(10) + "  ...VodPlayerOverlay_video" + chr(10) + "  muteInfo {" + chr(10) + "    mutedSegmentConnection {" + chr(10) + "      nodes {" + chr(10) + "        duration" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  owner {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    broadcastSettings {" + chr(10) + "      isMature" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    subscriptionProducts {" + chr(10) + "      displayName" + chr(10) + "      hasSubonlyVideoArchive" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    displayName" + chr(10) + "  }" + chr(10) + "  resourceRestriction {" + chr(10) + "    type" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  self {" + chr(10) + "    isRestricted" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "",
        variables: {
            "login": m.top.request.params.id
            "platform": "switch_web_tv"
            "playerType": "quasar"
            "skipPlayToken": false
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getFollowingPageQuery() as object
    rsp = TwitchGraphQLRequest({
        query: "query FollowingPage_Query(" + chr(10) + "  $first: Int!" + chr(10) + "  $liveUserCursor: Cursor" + chr(10) + "  $offlineUserCursor: Cursor" + chr(10) + "  $followedGameType: FollowedGamesType" + chr(10) + "  $categoryFirst: Int!" + chr(10) + "  $itemsPerRow: Int!" + chr(10) + "  $limit: Int!" + chr(10) + "  $platform: String!" + chr(10) + "  $requestID: String!" + chr(10) + ") {" + chr(10) + "  user {" + chr(10) + "    followedLiveUsers(first: $first, after: $liveUserCursor) {" + chr(10) + "      edges {" + chr(10) + "        node {" + chr(10) + "          id" + chr(10) + "          __typename" + chr(10) + "        }" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "    follows(first: $first, after: $offlineUserCursor) {" + chr(10) + "      edges {" + chr(10) + "        node {" + chr(10) + "          id" + chr(10) + "          __typename" + chr(10) + "          stream {" + chr(10) + "            id" + chr(10) + "            __typename" + chr(10) + "          }" + chr(10) + "        }" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "    followedGames(first: $categoryFirst, type: $followedGameType) {" + chr(10) + "      nodes {" + chr(10) + "        id" + chr(10) + "        __typename" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "    ...LiveStreamInfiniteShelf_followedLiveUsers" + chr(10) + "    ...OfflineInfiniteShelf_followedUsers" + chr(10) + "    ...CategoryShelf_followedCategories" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  ...FollowingPageEmpty_Query" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment CategoryBannerContent_category on Game {" + chr(10) + "  streams(first: 1) {" + chr(10) + "    edges {" + chr(10) + "      node {" + chr(10) + "        ...FollowingLiveStreamBannerContent_stream" + chr(10) + "        id" + chr(10) + "        __typename" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment CategoryShelf_followedCategories on User {" + chr(10) + "  followedGames(first: $categoryFirst, type: $followedGameType) {" + chr(10) + "    nodes {" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "      displayName" + chr(10) + "      developers" + chr(10) + "      boxArtURL" + chr(10) + "      ...FocusableCategoryCard_category" + chr(10) + "      ...CategoryBannerContent_category" + chr(10) + "      streams(first: 1) {" + chr(10) + "        edges {" + chr(10) + "          node {" + chr(10) + "            previewImageURL" + chr(10) + "            id" + chr(10) + "            __typename" + chr(10) + "          }" + chr(10) + "        }" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableCategoryCard_category on Game {" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  name" + chr(10) + "  displayName" + chr(10) + "  viewersCount" + chr(10) + "  boxArtURL" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableOfflineChannelCard_channel on User {" + chr(10) + "  displayName" + chr(10) + "  followers {" + chr(10) + "    totalCount" + chr(10) + "  }" + chr(10) + "  lastBroadcast {" + chr(10) + "    startedAt" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  login" + chr(10) + "  profileImageURL(width: 300)" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableStreamCard_stream on Stream {" + chr(10) + "  broadcaster {" + chr(10) + "    displayName" + chr(10) + "    login" + chr(10) + "    broadcastSettings {" + chr(10) + "      title" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    profileImageURL(width: 50)" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  game {" + chr(10) + "    displayName" + chr(10) + "    name" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  previewImageURL" + chr(10) + "  type" + chr(10) + "  viewersCount" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FollowingLiveStreamBannerContent_stream on Stream {" + chr(10) + "  game {" + chr(10) + "    displayName" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  broadcaster {" + chr(10) + "    broadcastSettings {" + chr(10) + "      title" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    displayName" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FollowingPageEmpty_Query on Query {" + chr(10) + "  shelves(itemsPerRow: $itemsPerRow, first: $limit, platform: $platform, requestID: $requestID) {" + chr(10) + "    edges {" + chr(10) + "      node {" + chr(10) + "        id" + chr(10) + "        __typename" + chr(10) + "        title {" + chr(10) + "          fallbackLocalizedTitle" + chr(10) + "          localizedTitleTokens {" + chr(10) + "            node {" + chr(10) + "              __typename" + chr(10) + "              ... on Game {" + chr(10) + "                __typename" + chr(10) + "                displayName" + chr(10) + "                name" + chr(10) + "                id" + chr(10) + "                __typename" + chr(10) + "              }" + chr(10) + "              ... on TextToken {" + chr(10) + "                __typename" + chr(10) + "                text" + chr(10) + "                location" + chr(10) + "              }" + chr(10) + "              ... on BrowsableCollection {" + chr(10) + "                id" + chr(10) + "                __typename" + chr(10) + "              }" + chr(10) + "              ... on Tag {" + chr(10) + "                id" + chr(10) + "                __typename" + chr(10) + "              }" + chr(10) + "              ... on User {" + chr(10) + "                id" + chr(10) + "                __typename" + chr(10) + "              }" + chr(10) + "            }" + chr(10) + "          }" + chr(10) + "        }" + chr(10) + "        trackingInfo {" + chr(10) + "          rowName" + chr(10) + "        }" + chr(10) + "        content {" + chr(10) + "          edges {" + chr(10) + "            trackingID" + chr(10) + "            node {" + chr(10) + "              __typename" + chr(10) + "              __isShelfContent: __typename" + chr(10) + "              ... on Stream {" + chr(10) + "                id" + chr(10) + "                __typename" + chr(10) + "                previewImageURL" + chr(10) + "                broadcaster {" + chr(10) + "                  displayName" + chr(10) + "                  broadcastSettings {" + chr(10) + "                    title" + chr(10) + "                    id" + chr(10) + "                    __typename" + chr(10) + "                  }" + chr(10) + "                  id" + chr(10) + "                  __typename" + chr(10) + "                }" + chr(10) + "                game {" + chr(10) + "                  displayName" + chr(10) + "                  boxArtURL" + chr(10) + "                  id" + chr(10) + "                  __typename" + chr(10) + "                }" + chr(10) + "                ...FocusableStreamCard_stream" + chr(10) + "              }" + chr(10) + "              ... on Game {" + chr(10) + "                ...FocusableCategoryCard_category" + chr(10) + "                id" + chr(10) + "                __typename" + chr(10) + "                streams(first: 1) {" + chr(10) + "                  edges {" + chr(10) + "                    node {" + chr(10) + "                      id" + chr(10) + "                      __typename" + chr(10) + "                      previewImageURL" + chr(10) + "                      broadcaster {" + chr(10) + "                        displayName" + chr(10) + "                        broadcastSettings {" + chr(10) + "                          title" + chr(10) + "                          id" + chr(10) + "                          __typename" + chr(10) + "                        }" + chr(10) + "                        id" + chr(10) + "                        __typename" + chr(10) + "                      }" + chr(10) + "                      game {" + chr(10) + "                        displayName" + chr(10) + "                        boxArtURL" + chr(10) + "                        id" + chr(10) + "                        __typename" + chr(10) + "                      }" + chr(10) + "                    }" + chr(10) + "                  }" + chr(10) + "                }" + chr(10) + "              }" + chr(10) + "              ... on Clip {" + chr(10) + "                id" + chr(10) + "                __typename" + chr(10) + "              }" + chr(10) + "              ... on Tag {" + chr(10) + "                id" + chr(10) + "                __typename" + chr(10) + "              }" + chr(10) + "              ... on Video {" + chr(10) + "                id" + chr(10) + "                __typename" + chr(10) + "              }" + chr(10) + "            }" + chr(10) + "          }" + chr(10) + "        }" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment LiveStreamInfiniteShelf_followedLiveUsers on User {" + chr(10) + "  followedLiveUsers(first: $first, after: $liveUserCursor) {" + chr(10) + "    edges {" + chr(10) + "      cursor" + chr(10) + "      node {" + chr(10) + "        id" + chr(10) + "        __typename" + chr(10) + "        displayName" + chr(10) + "        stream {" + chr(10) + "          previewImageURL" + chr(10) + "          game {" + chr(10) + "            boxArtURL" + chr(10) + "            id" + chr(10) + "            __typename" + chr(10) + "          }" + chr(10) + "          ...FollowingLiveStreamBannerContent_stream" + chr(10) + "          ...FocusableStreamCard_stream" + chr(10) + "          id" + chr(10) + "          __typename" + chr(10) + "        }" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment OfflineBannerContent_user on User {" + chr(10) + "  displayName" + chr(10) + "  lastBroadcast {" + chr(10) + "    startedAt" + chr(10) + "    game {" + chr(10) + "      displayName" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  stream {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment OfflineInfiniteShelf_followedUsers on User {" + chr(10) + "  follows(first: $first, after: $offlineUserCursor) {" + chr(10) + "    edges {" + chr(10) + "      cursor" + chr(10) + "      node {" + chr(10) + "        id" + chr(10) + "        __typename" + chr(10) + "        bannerImageURL" + chr(10) + "        displayName" + chr(10) + "        lastBroadcast {" + chr(10) + "          game {" + chr(10) + "            boxArtURL" + chr(10) + "            id" + chr(10) + "            __typename" + chr(10) + "          }" + chr(10) + "          id" + chr(10) + "          __typename" + chr(10) + "        }" + chr(10) + "        stream {" + chr(10) + "          id" + chr(10) + "          __typename" + chr(10) + "        }" + chr(10) + "        ...OfflineBannerContent_user" + chr(10) + "        ...FocusableOfflineChannelCard_channel" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + ""
        variables: {
            "first": 100
            ' "liveUserCursor": ""
            ' "offlineUserCursor": ""
            "followedGameType": "ALL"
            "categoryFirst": 100
            "itemsPerRow": 25
            "limit": 8
            "platform": "switch_web_tv"
            "requestID": getRandomUUID()
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getRendezvouzToken()
    req = HttpRequest({
        url: "https://id.twitch.tv/oauth2/device?scopes=channel_read%20chat%3Aread%20user_blocks_edit%20user_blocks_read%20user_follows_edit%20user_read&client_id=ue6666qo983tsx6so1t0vnawi233wa"
        headers: {
            "content-type": "application/x-www-form-urlencoded"
            "origin": "https://switch.tv.twitch.tv"
            "referer": "https://switch.tv.twitch.tv/"
        }
        method: "POST"
    })
    rsp = ParseJSON(req.send())
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function


function getOauthToken()
    if m.top.request.params.device_code = invalid return invalid
    req = HttpRequest({
        url: "https://id.twitch.tv/oauth2/token" + "?client_id=ue6666qo983tsx6so1t0vnawi233wa&device_code=" + m.top.request.params.device_code + "&grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Adevice_code"
        headers: {
            "content-type": "application/x-www-form-urlencoded"
            "origin": "https://switch.tv.twitch.tv"
            "referer": "https://switch.tv.twitch.tv/"
            "accept": "application/json"
        }
        method: "POST"
    })
    while true
        rsp = ParseJSON(req.send())
        if rsp <> invalid and rsp.DoesExist("access_token")
            exit while
        end if
        sleep(5000)
    end while
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getSearchQuery()
    if m.top.request.query <> invalid and m.top.request.query <> ""
        noQuery = false
    else
        noQuery = true
    end if
    rsp = TwitchGraphQLRequest({
        query: "query Search_Query(" + chr(10) + "  $userQuery: String!" + chr(10) + "  $platform: String!" + chr(10) + "  $noQuery: Boolean!" + chr(10) + ") {" + chr(10) + "  currentUser {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    roles {" + chr(10) + "      isStaff" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  searchFor(userQuery: $userQuery, platform: $platform) @skip(if: $noQuery) {" + chr(10) + "    ...SearchResults_results" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableCategoryCard_category on Game {" + chr(10) + "  name" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  displayName" + chr(10) + "  viewersCount" + chr(10) + "  boxArtURL" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableOfflineChannelCard_channel on User {" + chr(10) + "  displayName" + chr(10) + "  followers {" + chr(10) + "    totalCount" + chr(10) + "  }" + chr(10) + "  lastBroadcast {" + chr(10) + "    startedAt" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  login" + chr(10) + "  profileImageURL(width: 300)" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableStreamCard_stream on Stream {" + chr(10) + "  broadcaster {" + chr(10) + "    displayName" + chr(10) + "    login" + chr(10) + "    hosting {" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    broadcastSettings {" + chr(10) + "      title" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    profileImageURL(width: 50)" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  game {" + chr(10) + "    displayName" + chr(10) + "    boxArtURL" + chr(10) + "    name" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  previewImageURL" + chr(10) + "  type" + chr(10) + "  viewersCount" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableVodCard_video on Video {" + chr(10) + "  createdAt" + chr(10) + "  lengthSeconds" + chr(10) + "  owner {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    displayName" + chr(10) + "    }" + chr(10) + "  game {" + chr(10) + "    boxArtURL" + chr(10) + "    name" + chr(10) + " displayName" + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " }" + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " previewThumbnailURL" + chr(10) + " self { " + chr(10) + " viewingHistory { " + chr(10) + " position" + chr(10) + " }" + chr(10) + " }" + chr(10) + " title" + chr(10) + " viewCount" + chr(10) + " }" + chr(10) + "" + chr(10) + "fragment SearchResults_results on SearchFor { " + chr(10) + " channels { " + chr(10) + " items { " + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " bannerImageURL" + chr(10) + " ...FocusableOfflineChannelCard_channel" + chr(10) + " stream { " + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " previewImageURL" + chr(10) + " ...FocusableStreamCard_stream" + chr(10) + " game { " + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " }" + chr(10) + " }" + chr(10) + " }" + chr(10) + " }" + chr(10) + " relatedLiveChannels { " + chr(10) + " items { " + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " bannerImageURL" + chr(10) + " ...FocusableOfflineChannelCard_channel" + chr(10) + " stream { " + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " previewImageURL" + chr(10) + " ...FocusableStreamCard_stream" + chr(10) + " game { " + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " }" + chr(10) + " }" + chr(10) + " }" + chr(10) + " }" + chr(10) + " games { " + chr(10) + " items { " + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " ...FocusableCategoryCard_category" + chr(10) + " streams(first: 1) { " + chr(10) + " edges { " + chr(10) + " node { " + chr(10) + " previewImageURL" + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " }" + chr(10) + " }" + chr(10) + " }" + chr(10) + " }" + chr(10) + " }" + chr(10) + " videos { " + chr(10) + " items { " + chr(10) + " ...FocusableVodCard_video" + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " game { " + chr(10) + " id" + chr(10) + " __typename" + chr(10) + " }" + chr(10) + " previewThumbnailURL" + chr(10) + " }" + chr(10) + " }" + chr(10) + " }"
        variables: {
            "userQuery": m.top.request.query.toStr()
            "platform": "switch_web_tv"
            "noQuery": noQuery
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getGameDirectoryQuery()
    ? "param: " m.top.request.params
    if m.top.request.params.gamealias = invalid return invalid
    rsp = TwitchGraphQLRequest({
        query: "query GameDirectory_Query(" + chr(10) + "  $gameAlias: String!" + chr(10) + "  $channelsCount: Int!" + chr(10) + ") {" + chr(10) + "  currentUser {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    roles {" + chr(10) + "      isStaff" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  game(name: $gameAlias) {" + chr(10) + "    boxArtURL" + chr(10) + "    displayName" + chr(10) + "    name" + chr(10) + "    streams(first: $channelsCount) {" + chr(10) + "      edges {" + chr(10) + "        node {" + chr(10) + "          id" + chr(10) + "          __typename" + chr(10) + "          previewImageURL" + chr(10) + "          ...FocusableStreamCard_stream" + chr(10) + "        }" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableStreamCard_stream on Stream {" + chr(10) + "  broadcaster {" + chr(10) + "    displayName" + chr(10) + "    login" + chr(10) + "    hosting {" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    broadcastSettings {" + chr(10) + "      title" + chr(10) + "      id" + chr(10) + "      __typename" + chr(10) + "    }" + chr(10) + "    profileImageURL(width: 50)" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  game {" + chr(10) + "    displayName" + chr(10) + "    name" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "  }" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  previewImageURL" + chr(10) + "  type" + chr(10) + "  viewersCount" + chr(10) + "}",
        variables: {
            "gameAlias": m.top.request.params.gamealias,
            "channelsCount": 40
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getCategoriesQuery()
    rsp = TwitchGraphQLRequest({
        query: "query GamesDirectory_Query(" + chr(10) + "  $first: Int!" + chr(10) + ") {" + chr(10) + "  currentUser {" + chr(10) + "    id" + chr(10) + "    __typename" + chr(10) + "    login" + chr(10) + "    roles {" + chr(10) + "      isStaff" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "  games(first: $first) {" + chr(10) + "    edges {" + chr(10) + "      node {" + chr(10) + "        ...FocusableCategoryCard_category" + chr(10) + "        id" + chr(10) + "        __typename" + chr(10) + "      }" + chr(10) + "    }" + chr(10) + "  }" + chr(10) + "}" + chr(10) + "" + chr(10) + "fragment FocusableCategoryCard_category on Game {" + chr(10) + "  name" + chr(10) + "  id" + chr(10) + "  __typename" + chr(10) + "  displayName" + chr(10) + "  viewersCount" + chr(10) + "  boxArtURL" + chr(10) + "}",
        variables: {
            "first": 80
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getChannelShell()
    if m.top.request.params.id = invalid return invalid
    rsp = TwitchGraphQLRequest({
        operationName: "ChannelShell"
        variables: {
            login: m.top.request.params.id
        }
        extensions: {
            persistedQuery: {
                version: 1,
                sha256Hash: "580ab410bcd0c1ad194224957ae2241e5d252b2c5173d8e0cce9d32d5bb14efe"
            }
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function TwitchHelixApiRequest()
    ? "HelixAPIRequest"
    access_token = ""
    device_code = ""
    ' doubled up here in stead of defaulting to "" because access_token is dependent on device_code
    if get_user_setting("device_code") <> invalid
        device_code = get_user_setting("device_code")
        if get_user_setting("access_token") <> invalid
            access_token = "Bearer " + get_user_setting("access_token")
        end if
    end if
    requestParams = {
        url: "https://api.twitch.tv/helix/" + m.top.request.params.endpoint + "?" + m.top.request.params.args
        headers: {
            "Accept": "*/*"
            "Authorization": access_token
            "Client-Id": "ue6666qo983tsx6so1t0vnawi233wa"
            "Device-ID": device_code
            "Origin": "https://switch.tv.twitch.tv"
            "Referer": "https://switch.tv.twitch.tv/"
        }
        method: m.top.request.params.method
    }
    if m.top.request.params.data <> invalid
        requestParams["data"] = m.top.request.params.data
    end if
    req = HttpRequest(requestParams)
    rsp = ParseJSON(req.send())
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function


function followChannel() as object
    rsp = TwitchGraphQLRequest({
        operationName: "FollowButton_FollowUser",
        variables: {
            input: {
                disableNotifications: false,
                targetID: m.top.request.params.id
            }
        },
        extensions: {
            persistedQuery: {
                version: 1,
                sha256Hash: "800e7346bdf7e5278a3c1d3f21b2b56e2639928f86815677a7126b093b2fdd08"
            }
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getRecommendedSections() as object
    rsp = TwitchGraphQLRequest({
        operationName: "Shelves",
        variables: {
            "imageWidth": 50,
            "itemsPerRow": 3,
            "platform": "web",
            "limit": 8,
            "requestID": getRandomUUID(),
            "context": {
                "clientApp": "twilight",
                "location": "home",
                "referrerDomain": "twitch.tv",
                "viewportHeight": 1080,
                "viewportWidth": 1920
            },
            "verbose": false
        },
        extensions: {
            persistedQuery: {
                version: 1,
                sha256Hash: "b6f0c72c747457b73107f6aa00bd6a5bb294539d2de5398646e949c863662543"
            }
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function unfollowChannel() as object
    rsp = TwitchGraphQLRequest({
        operationName: "FollowButton_UnfollowUser",
        variables: {
            input: {
                targetID: m.top.request.params.id
            }
        },
        extensions: {
            persistedQuery: {
                version: 1,
                sha256Hash: "f7dae976ebf41c755ae2d758546bfd176b4eeb856656098bb40e0a672ca0d880"
            }
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function


function getBrowsePageQuery()
    variables = {
        "limit": 100,
        "options": {
            "recommendationsContext": {
                "platform": "web"
            },
            "requestID": "JIRA-VXP-2397",
            "sort": "VIEWER_COUNT",
            "tags": []
        }
    }
    if m.top.request.cursor <> invalid
        variables["cursor"] = m.top.request.cursor
    end if
    rsp = TwitchGraphQLRequest({
        "operationName": "BrowsePage_AllDirectories",
        "variables": variables
        "extensions": {
            "persistedQuery": {
                "version": 1,
                "sha256Hash": "1d1914ca3cbfaa607ecd5595b2e305e96acf987c8f25328f7713b25f604c4668"
            }
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function