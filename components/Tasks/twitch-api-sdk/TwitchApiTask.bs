function GetRandomUUID()
    di = CreateObject("roDeviceInfo")
    return di.GetRandomUUID()
end function

function getDeviceLocale()
    di = CreateObject("roDeviceInfo")
    return di.GetCurrentLocale().Replace("_", "-")
end function

function TwitchGraphQLRequest(data)
    access_token = invalid
    device_code = invalid
    ' doubled up here in stead of defaulting to "" because access_token is dependent on device_code
    if get_user_setting("device_code") <> invalid
        device_code = get_user_setting("device_code")
        if get_user_setting("access_token") <> invalid
            access_token = "OAuth " + get_user_setting("access_token")
        end if
    else
        return invalid
    end if
    reqHeaders = {
        "Accept": "*/*"
        "Client-Id": "ue6666qo983tsx6so1t0vnawi233wa"
        "Device-ID": device_code
        "Origin": "https://switch.tv.twitch.tv"
        "Referer": "https://switch.tv.twitch.tv/"
        "Accept-Language": getDeviceLocale()
    }
    if access_token <> invalid
        reqHeaders["Authorization"] = access_token
    end if
    req = HttpRequest({
        url: "https://gql.twitch.tv/gql"
        headers: reqHeaders
        method: "POST"
        data: data
    })
    rsp = ParseJSON(req.send())
    return rsp
end function

function getHomePageQuery() as object
    rsp = TwitchGraphQLRequest({
        query: `query Homepage_Query(
            $itemsPerRow: Int!
            $limit: Int!
            $platform: String!
            $requestID: String!
            ) {
            currentUser {
                id
                __typename
                login
                roles {
                isStaff
                }
            }
            shelves(itemsPerRow: $itemsPerRow, first: $limit, platform: $platform, requestID: $requestID) {
                edges {
                node {
                    id
                    __typename
                    title {
                    fallbackLocalizedTitle
                    localizedTitleTokens {
                        node {
                        __typename
                        ... on Game {
                            __typename
                            displayName
                            name
                        }
                        ... on TextToken {
                            __typename
                            text
                            location
                        }
                        }
                    }
                    }
                    trackingInfo {
                    reasonTarget
                    reasonTargetType
                    reasonType
                    rowName
                    }
                    content {
                    edges {
                        trackingID
                        node {
                        __typename
                        __isShelfContent: __typename
                        ... on Stream {
                            id
                            __typename
                            previewImageURL
                            broadcaster {
                            displayName
                            broadcastSettings {
                                title
                                id
                                __typename
                            }
                            id
                            __typename
                            }
                            game {
                            displayName
                            boxArtURL
                            id
                            __typename
                            }
                            ...FocusableStreamCard_stream
                        }
                        ... on Game {
                            ...FocusableCategoryCard_category
                            id
                            __typename
                            streams(first: 1) {
                            edges {
                                node {
                                id
                                __typename
                                previewImageURL
                                broadcaster {
                                    displayName
                                    broadcastSettings {
                                    title
                                    id
                                    __typename
                                    }
                                    id
                                    __typename
                                }
                                game {
                                    displayName
                                    boxArtURL
                                    id
                                    __typename
                                }
                                }
                            }
                            }
                        }
                        }
                    }
                    }
                }
                }
            }
            }

            fragment FocusableCategoryCard_category on Game {
            name
            id
            __typename
            displayName
            viewersCount
            boxArtURL
            }

            fragment FocusableStreamCard_stream on Stream {
            broadcaster {
                displayName
                login
                hosting {
                id
                __typename
                }
                broadcastSettings {
                title
                id
                __typename
                }
                profileImageURL(width: 50)
                id
                __typename
            }
            game {
                displayName
                name
                id
                __typename
            }
            id
            __typename
            previewImageURL
            type
            viewersCount
        }`
        variables: {
            "itemsPerRow": 20,
            "limit": 8,
            "platform": "switch_web_tv",
            "requestID": getRandomUUID()
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getCategoryQuery() as object
    rsp = TwitchGraphQLRequest({
        query: `query GameDirectory_Query(
            $gameAlias: String!
            $channelsCount: Int!
            ) {
            currentUser {
                id
                __typename
                login
                roles {
                isStaff
                }
            }
            game(name: $gameAlias) {
                boxArtURL
                displayName
                name
                streams(first: $channelsCount) {
                edges {
                    node {
                    id
                    __typename
                    previewImageURL
                    ...FocusableStreamCard_stream
                    }
                }
                }
                id
                __typename
            }
            }

            fragment FocusableStreamCard_stream on Stream {
            broadcaster {
                displayName
                login
                hosting {
                id
                __typename
                }
                broadcastSettings {
                title
                id
                __typename
                }
                profileImageURL(width: 50)
                id
                __typename
            }
            game {
                displayName
                name
                id
                __typename
            }
            id
            __typename
            previewImageURL
            type
            viewersCount
            }`
        variables: {
            "channelsCount": 40
            "gameAlias": m.top.request.params.id
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getStreamPlayerQuery()
    rsp = TwitchGraphQLRequest({
        query: `query StreamPlayer_Query(
            $login: String!
            $playerType: String!
            $platform: String!
            $skipPlayToken: Boolean!
            ) {
            ...StreamPlayer_token
            }

            fragment StreamPlayer_token on Query {
            user(login: $login) {
                login
                stream @skip(if: $skipPlayToken) {
                    playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {
                        signature
                        value
                    }
                    id
                    __typename
                }
                id
                __typename
            }
        }`
        variables: {
            "login": m.top.request.params.id
            "platform": "switch_web_tv"
            "playerType": "pulsar"
            "skipPlayToken": false
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getVodPlayerWrapperQuery() as object
    rsp = TwitchGraphQLRequest({
        query: `query VodPlayerWrapper_Query(
            $videoId: ID!
            $platform: String!
            $playerType: String!
            $skipPlayToken: Boolean!
            ) {
            ...VodPlayerWrapper_token
            }
            fragment VodPlayerWrapper_token on Query {
            video(id: $videoId) @skip(if: $skipPlayToken) {
                playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {
                    signature
                   value
                }
                id
                __typename
            }
        }`
        variables: {
            "videoId": m.top.request.params.id
            "platform": "switch_web_tv"
            "playerType": "pulsar"
            "skipPlayToken": false
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function


function getChannelInterstitialQuery() as object
    rsp = TwitchGraphQLRequest({
        query: `query ChannelInterstitial_Query(
            $login: String!
            $platform: String!
            $playerType: String!
            $skipPlayToken: Boolean!
            ) {
            channel: user(login: $login) {
                ...InterstitialLayout_channel
                ...StreamDetails_channel
                ...StreamPlayer_channel
                id
                __typename
                login
                displayName
                broadcastSettings {
                    isMature
                    id
                    __typename
                }
                stream {
                    restrictionType
                    self {
                        canWatch
                    }
                    id
                    __typename
                    type
                }
                hosting {
                    displayName
                    id
                    __typename
                    login
                    stream {
                        id
                        __typename
                        type
                    }
                }
            }
            currentUser {
                ...StreamPlayer_currentUser
                id
                __typename
                login
                roles {
                    isStaff
                }
            }
            ...StreamPlayer_token
        }

        fragment BroadcasterOverview_channel on User {
            login
            displayName
            followers {
                totalCount
            }
            primaryColorHex
            primaryTeam {
                displayName
                id
                __typename
            }
            profileImageURL(width: 70)
        }

        fragment ChannelDescription_channel on User {
            description
            displayName
            login
        }

        fragment FocusableFollowButton_channel on User {
            login
            id
            __typename
            self {
                follower {
                    followedAt
                }
            }
        }

        fragment InterstitialButtonRow_channel on User {
            ...FocusableFollowButton_channel
            login
        }

        fragment InterstitialLayout_channel on User {
            ...BroadcasterOverview_channel
            ...ChannelDescription_channel
            ...InterstitialButtonRow_channel
        }

        fragment StreamDetails_channel on User {
            broadcastSettings {
                game {
                    boxArtURL
                    displayName
                    id
                    __typename
                }
                title
                id
                __typename
            }
            stream {
                viewersCount
                id
                __typename
            }
        }

        fragment StreamPlayer_channel on User {
            id
            __typename
            login
            roles {
                isPartner
            }
            self {
                subscriptionBenefit {
                    id
                    __typename
                }
            }
            stream {
                id
                __typename
                game {
                    name
                    id
                    __typename
                }
                previewImageURL
            }
        }

        fragment StreamPlayer_currentUser on User {
            hasTurbo
            id
            __typename
        }

        fragment StreamPlayer_token on Query {
            user(login: $login) {
                login
                stream @skip(if: $skipPlayToken) {
                    playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {
                        signature
                        value
                    }
                    id
                    __typename
                }
                id
                __typename
            }
        }`
        variables: {
            "login": m.top.request.params.id
            "platform": "switch_web_tv"
            "playerType": "pulsar"
            "skipPlayToken": true
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getChannelHomeQuery() as object
    rsp = TwitchGraphQLRequest({
        query: `query ChannelHome_Query(
            $login: String!
            $platform: String!
            $playerType: String!
            $skipPlayToken: Boolean!
        ) {
            channel: user(login: $login) {
                id
                __typename
                login
                stream {
                    id
                    __typename
                }
                videoShelves {
                    edges {
                        node {
                            id
                            __typename
                            title
                            items {
                                __typename
                                __isVideoShelfItem: __typename
                                ... on Clip {
                                    ...FocusableClipCard_clip
                                }
                                ... on Video {
                                    ...FocusableVodCard_video
                                }
                            }
                        }
                    }
                }
                ...ProfileBanner_channel
            }
            currentUser {
                ...ProfileBanner_currentUser
                id
                __typename
                login
                roles {
                    isStaff
                }
            }
            ...StreamPlayer_token
            ...VodPreviewPlayerWrapper_previewToken
        }

        fragment BannerButtonsRow_channel on User {
            ...FocusableFollowButton_channel
            displayName
            hosting {
                displayName
                id
                __typename
                login
                stream {
                    id
                    __typename
                    type
                }
            }
            id
            __typename
            login
            stream {
                id
                __typename
                type
            }
            videos(first: 1, sort: TIME) {
                edges {
                    node {
                        id
                        __typename
                    }
                }
            }
        }

        fragment BannerChannelStatus_channel on User {
            displayName
            hosting {
                displayName
                id
                __typename
                login
                stream {
                    id
                    __typename
                    type
                }
            }
            id
            __typename
            login
            stream {
                id
                __typename
                type
            }
        }

        fragment DefaultPreviewContent_channel on User {
            ...SwitchPreviewContent_channel
            ...StreamPreviewPlayer_channel
            hosting {
                id
                __typename
                login
                stream {
                    id
                    __typename
                    type
                    viewersCount
                }
            }
            id
            __typename
            login
            stream {
                id
                __typename
                type
                viewersCount
            }
            videos(first: 1, sort: TIME) {
                edges {
                    node {
                        id
                        __typename
                        previewThumbnailURL
                        ...VodPreviewPlayer_video
                    }
                }
            }
        }

        fragment DefaultPreviewContent_currentUser on User {
            ...StreamPreviewPlayer_currentUser
            ...VodPreviewPlayer_currentUser
        }

        fragment FocusableClipCard_clip on Clip {
            broadcaster {
                login
                id
                __typename
            }
            createdAt
            durationSeconds
            game {
                boxArtURL
                displayName
                id
                __typename
            }
            id
            __typename
            slug
            thumbnailURL
            title
            viewCount
        }

        fragment FocusableFollowButton_channel on User {
            login
            id
            __typename
            self {
                follower {
                    followedAt
                }
            }
        }

        fragment FocusableVodCard_video on Video {
            createdAt
            lengthSeconds
            game {
                boxArtURL
                displayName
                id
                __typename
            }
            id
            __typename
            previewThumbnailURL
            self {
                viewingHistory {
                    position
                }
            }
            title
            viewCount
        }

        fragment ProfileBanner_channel on User {
            ...BannerButtonsRow_channel
            ...BannerChannelStatus_channel
            ...SwitchPreviewContent_channel
            ...DefaultPreviewContent_channel
            description
            displayName
            followers {
                totalCount
            }
            hosting {
                id
                __typename
                login
                profileImageURL(width: 150)
            }
            id
            __typename
            login
            profileImageURL(width: 150)
            profileViewCount
        }

        fragment ProfileBanner_currentUser on User {
            ...DefaultPreviewContent_currentUser
        }

        fragment StreamPlayer_channel on User {
            id
            __typename
            login
            roles {
                isPartner
            }
            self {
                subscriptionBenefit {
                    id
                    __typename
                }
            }
            stream {
                id
                __typename
                game {
                    name
                    id
                    __typename
                }
                previewImageURL
            }
        }

        fragment StreamPlayer_currentUser on User {
            hasTurbo
            id
            __typename
        }

        fragment StreamPlayer_token on Query {
            user(login: $login) {
                login
                stream @skip(if: $skipPlayToken) {
                    playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {
                        signature
                        value
                    }
                    id
                    __typename
                }
                id
                __typename
            }
        }

        fragment StreamPreviewPlayer_channel on User {
            hosting {
                ...StreamPlayer_channel
                id
                __typename
                login
                stream {
                    id
                    __typename
                    type
                    viewersCount
                }
            }
            ...StreamPlayer_channel
            id
            __typename
            login
            stream {
                id
                __typename
                type
                viewersCount
                restrictionType
                self {
                    canWatch
                }
            }
            displayName
            broadcastSettings {
                isMature
                id
                __typename
            }
        }

        fragment StreamPreviewPlayer_currentUser on User {
            ...StreamPlayer_currentUser
        }

        fragment SwitchPreviewContent_channel on User {
            id
            __typename
            login
            stream {
                id
                __typename
                previewImageURL
            }
            videos(first: 1, sort: TIME) {
                edges {
                    node {
                        id
                        __typename
                        previewThumbnailURL
                    }
                }
            }
        }

        fragment VodPlayerBase_currentUser on User {
            id
            __typename
            hasTurbo
        }

        fragment VodPlayerBase_video on Video {
            broadcastType
            id
            __typename
            game {
                name
                id
                __typename
            }
            owner {
                id
                __typename
                login
                roles {
                    isPartner
                }
                self {
                    subscriptionBenefit {
                        id
                        __typename
                    }
                }
            }
            self {
                viewingHistory {
                    position
                }
            }
        }

        fragment VodPlayerOverlay_video on Video {
            createdAt
            lengthSeconds
            viewCount
        }

        fragment VodPreviewPlayerWrapper_previewToken on Query {
            user(login: $login) @skip(if: $skipPlayToken) {
                videos(first: 1) {
                    edges {
                        node {
                            playbackAccessToken(params: {platform: $platform, playerType: $playerType}) {
                                signature
                                value
                            }
                            id
                            __typename
                        }
                    }
                }
                id
                __typename
            }
        }

        fragment VodPreviewPlayer_currentUser on User {
            ...VodPlayerBase_currentUser
        }

        fragment VodPreviewPlayer_video on Video {
            ...VodPlayerBase_video
            ...VodPlayerOverlay_video
            muteInfo {
                mutedSegmentConnection {
                    nodes {
                        duration
                    }
                }
            }
            owner {
                id
                __typename
                login
                broadcastSettings {
                    isMature
                    id
                    __typename
                }
                subscriptionProducts {
                    displayName
                    hasSubonlyVideoArchive
                    id
                    __typename
                }
                displayName
            }
            resourceRestriction {
                type
                id
                __typename
            }
            self {
                isRestricted
            }
        }`
        variables: {
            "login": m.top.request.params.id
            "platform": "switch_web_tv"
            "playerType": "quasar"
            "skipPlayToken": false
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getFollowingPageQuery() as object
    rsp = TwitchGraphQLRequest({
        query: `query FollowingPage_Query(
            $first: Int!
            $liveUserCursor: Cursor
            $offlineUserCursor: Cursor
            $followedGameType: FollowedGamesType
            $categoryFirst: Int!
            $itemsPerRow: Int!
            $limit: Int!
            $platform: String!
            $requestID: String!
        ) {
            user {
                followedLiveUsers(first: $first, after: $liveUserCursor) {
                    edges {
                        node {
                            id
                            __typename
                        }
                    }
                }
                follows(first: $first, after: $offlineUserCursor) {
                    edges {
                        node {
                            id
                            __typename
                            stream {
                                id
                                __typename
                            }
                        }
                    }
                }
                followedGames(first: $categoryFirst, type: $followedGameType) {
                    nodes {
                        id
                        __typename
                    }
                }
                ...LiveStreamInfiniteShelf_followedLiveUsers
                ...OfflineInfiniteShelf_followedUsers
                ...CategoryShelf_followedCategories
                id
                __typename
            }
            ...FollowingPageEmpty_Query
        }

        fragment CategoryBannerContent_category on Game {
            streams(first: 1) {
                edges {
                    node {
                        ...FollowingLiveStreamBannerContent_stream
                        id
                        __typename
                    }
                }
            }
        }

        fragment CategoryShelf_followedCategories on User {
            followedGames(first: $categoryFirst, type: $followedGameType) {
                nodes {
                    id
                    __typename
                    displayName
                    developers
                    boxArtURL
                    ...FocusableCategoryCard_category
                    ...CategoryBannerContent_category
                    streams(first: 1) {
                        edges {
                            node {
                                previewImageURL
                                id
                                __typename
                            }
                        }
                    }
                }
            }
        }

        fragment FocusableCategoryCard_category on Game {
            id
            __typename
            name
            displayName
            viewersCount
            boxArtURL
        }

        fragment FocusableOfflineChannelCard_channel on User {
            displayName
            followers {
                totalCount
            }
            lastBroadcast {
                startedAt
                id
                __typename
            }
            login
            profileImageURL(width: 300)
        }

        fragment FocusableStreamCard_stream on Stream {
            broadcaster {
                displayName
                login
                broadcastSettings {
                    title
                    id
                    __typename
                }
                profileImageURL(width: 50)
                id
                __typename
            }
            game {
                displayName
                name
                id
                __typename
            }
            id
            __typename
            previewImageURL
            type
            viewersCount
        }

        fragment FollowingLiveStreamBannerContent_stream on Stream {
            game {
                displayName
                id
                __typename
            }
            broadcaster {
                broadcastSettings {
                    title
                    id
                    __typename
                }
                displayName
                id
                __typename
            }
        }

        fragment FollowingPageEmpty_Query on Query {
            shelves(itemsPerRow: $itemsPerRow, first: $limit, platform: $platform, requestID: $requestID) {
                edges {
                    node {
                        id
                        __typename
                        title {
                            fallbackLocalizedTitle
                            localizedTitleTokens {
                                node {
                                    __typename
                                    ... on Game {
                                        __typename
                                        displayName
                                        name
                                        id
                                        __typename
                                    }
                                    ... on TextToken {
                                        __typename
                                        text
                                        location
                                    }
                                    ... on BrowsableCollection {
                                        id
                                        __typename
                                    }
                                    ... on Tag {
                                        id
                                        __typename
                                    }
                                    ... on User {
                                        id
                                        __typename
                                    }
                                }
                            }
                        }
                        trackingInfo {
                            rowName
                        }
                        content {
                            edges {
                                trackingID
                                node {
                                    __typename
                                    __isShelfContent: __typename
                                    ... on Stream {
                                        id
                                        __typename
                                        previewImageURL
                                        broadcaster {
                                            displayName
                                            broadcastSettings {
                                                title
                                                id
                                                __typename
                                            }
                                            id
                                            __typename
                                        }
                                        game {
                                            displayName
                                            boxArtURL
                                            id
                                            __typename
                                        }
                                        ...FocusableStreamCard_stream
                                    }
                                    ... on Game {
                                        ...FocusableCategoryCard_category
                                        id
                                        __typename
                                        streams(first: 1) {
                                            edges {
                                                node {
                                                    id
                                                    __typename
                                                    previewImageURL
                                                    broadcaster {
                                                        displayName
                                                        broadcastSettings {
                                                            title
                                                            id
                                                            __typename
                                                        }
                                                        id
                                                        __typename
                                                    }
                                                    game {
                                                        displayName
                                                        boxArtURL
                                                        id
                                                        __typename
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    ... on Clip {
                                        id
                                        __typename
                                    }
                                    ... on Tag {
                                        id
                                        __typename
                                    }
                                    ... on Video {
                                        id
                                        __typename
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        fragment LiveStreamInfiniteShelf_followedLiveUsers on User {
            followedLiveUsers(first: $first, after: $liveUserCursor) {
                edges {
                    cursor
                    node {
                        id
                        __typename
                        displayName
                        stream {
                            previewImageURL
                            game {
                                boxArtURL
                                id
                                __typename
                            }
                            ...FollowingLiveStreamBannerContent_stream
                            ...FocusableStreamCard_stream
                            id
                            __typename
                        }
                    }
                }
            }
        }

        fragment OfflineBannerContent_user on User {
            displayName
            lastBroadcast {
                startedAt
                game {
                    displayName
                    id
                    __typename
                }
                id
                __typename
            }
            stream {
                id
                __typename
            }
        }

        fragment OfflineInfiniteShelf_followedUsers on User {
            follows(first: $first, after: $offlineUserCursor) {
                edges {
                    cursor
                    node {
                        id
                        __typename
                        bannerImageURL
                        displayName
                        lastBroadcast {
                            game {
                                boxArtURL
                                id
                                __typename
                            }
                            id
                            __typename
                        }
                        stream {
                            id
                            __typename
                        }
                        ...OfflineBannerContent_user
                        ...FocusableOfflineChannelCard_channel
                    }
                }
            }
        }`
        variables: {
            "first": 100
            ' "liveUserCursor": ""
            ' "offlineUserCursor": ""
            "followedGameType": "ALL"
            "categoryFirst": 100
            "itemsPerRow": 25
            "limit": 8
            "platform": "switch_web_tv"
            "requestID": getRandomUUID()
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getRendezvouzToken()
    req = HttpRequest({
        url: "https://id.twitch.tv/oauth2/device?scopes=channel_read%20chat%3Aread%20user_blocks_edit%20user_blocks_read%20user_follows_edit%20user_read&client_id=ue6666qo983tsx6so1t0vnawi233wa"
        headers: {
            "content-type": "application/x-www-form-urlencoded"
            "origin": "https://switch.tv.twitch.tv"
            "referer": "https://switch.tv.twitch.tv/"
        }
        method: "POST"
    })
    rsp = ParseJSON(req.send())
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function


function getOauthToken()
    if m.top.request.params.device_code = invalid return invalid
    req = HttpRequest({
        url: "https://id.twitch.tv/oauth2/token" + "?client_id=ue6666qo983tsx6so1t0vnawi233wa&device_code=" + m.top.request.params.device_code + "&grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Adevice_code"
        headers: {
            "content-type": "application/x-www-form-urlencoded"
            "origin": "https://switch.tv.twitch.tv"
            "referer": "https://switch.tv.twitch.tv/"
            "accept": "application/json"
        }
        method: "POST"
    })
    while true
        rsp = ParseJSON(req.send())
        if rsp <> invalid and rsp.DoesExist("access_token")
            exit while
        end if
        sleep(5000)
    end while
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getSearchQuery()
    if m.top.request.query <> invalid and m.top.request.query <> ""
        noQuery = false
    else
        noQuery = true
    end if
    rsp = TwitchGraphQLRequest({
        query: `query Search_Query(
            $userQuery: String!
            $platform: String!
            $noQuery: Boolean!
        ) {
            currentUser {
                id
                __typename
                login
                roles {
                    isStaff
                }
            }
            searchFor(userQuery: $userQuery, platform: $platform) @skip(if: $noQuery) {
                ...SearchResults_results
            }
        }

        fragment FocusableCategoryCard_category on Game {
            name
            id
            __typename
            displayName
            viewersCount
            boxArtURL
        }

        fragment FocusableOfflineChannelCard_channel on User {
            displayName
            followers {
                totalCount
            }
            lastBroadcast {
                startedAt
                id
                __typename
            }
            login
            profileImageURL(width: 300)
        }

        fragment FocusableStreamCard_stream on Stream {
            broadcaster {
                displayName
                login
                hosting {
                    id
                    __typename
                }
                broadcastSettings {
                    title
                    id
                    __typename
                }
                profileImageURL(width: 50)
                id
                __typename
            }
            game {
                displayName
                boxArtURL
                name
                id
                __typename
            }
            id
            __typename
            previewImageURL
            type
            viewersCount
        }

        fragment FocusableVodCard_video on Video {
            createdAt
            lengthSeconds
            owner {
                id
                __typename
                login
                displayName
                }
            game {
                boxArtURL
                name
                displayName
                id
                __typename
            }
            id
            __typename
            previewThumbnailURL
            self {
                viewingHistory {
                    position
                }
            }
            title
            viewCount
        }

        fragment SearchResults_results on SearchFor {
            channels {
                items {
                    id
                    __typename
                    bannerImageURL
                    ...FocusableOfflineChannelCard_channel
                    stream {
                            id
                        __typename
                        previewImageURL
                        ...FocusableStreamCard_stream
                        game {
                            id
                        __typename
                        }
                    }
                }
            }
            relatedLiveChannels {
                items {
                    id
                    __typename
                    bannerImageURL
                    ...FocusableOfflineChannelCard_channel
                    stream {
                        id
                        __typename
                        previewImageURL
                        ...FocusableStreamCard_stream
                        game {
                            id
                            __typename
                        }
                    }
                }
            }
            games {
                items {
                    id
                    __typename
                    ...FocusableCategoryCard_category
                    streams(first: 1) {
                        edges {
                            node {
                                previewImageURL
                                id
                                __typename
                            }
                        }
                    }
                }
            }
            videos {
                items {
                    ...FocusableVodCard_video
                    id
                    __typename
                    game {
                        id
                        __typename
                    }
                    previewThumbnailURL
                }
            }
        }`
        variables: {
            "userQuery": m.top.request.query.toStr()
            "platform": "switch_web_tv"
            "noQuery": noQuery
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getGameDirectoryQuery()
    ? "param: " m.top.request.params
    if m.top.request.params.gamealias = invalid return invalid
    rsp = TwitchGraphQLRequest({
        query: `query GameDirectory_Query(
            $gameAlias: String!
            $channelsCount: Int!
        ) {
            currentUser {
                id
                __typename
                login
                roles {
                    isStaff
                }
            }
            game(name: $gameAlias) {
                boxArtURL
                displayName
                name
                streams(first: $channelsCount) {
                    edges {
                        node {
                            id
                            __typename
                            previewImageURL
                            ...FocusableStreamCard_stream
                        }
                    }
                }
                id
                __typename
            }
        }

        fragment FocusableStreamCard_stream on Stream {
            broadcaster {
                displayName
                login
                hosting {
                    id
                    __typename
                }
                broadcastSettings {
                    title
                    id
                    __typename
                }
                profileImageURL(width: 50)
                id
                __typename
            }
            game {
                displayName
                name
                id
                __typename
            }
            id
            __typename
            previewImageURL
            type
            viewersCount
        }`
        variables: {
            "gameAlias": m.top.request.params.gamealias,
            "channelsCount": 40
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getCategoriesQuery()
    rsp = TwitchGraphQLRequest({
        query: `query GamesDirectory_Query(
            $first: Int!
        ) {
            currentUser {
                id
                __typename
                login
                roles {
                    isStaff
                }
            }
            games(first: $first) {
                edges {
                    node {
                        ...FocusableCategoryCard_category
                        id
                        __typename
                    }
                }
            }
        }

        fragment FocusableCategoryCard_category on Game {
            name
            id
            __typename
            displayName
            viewersCount
            boxArtURL
        }`
        variables: {
            "first": 80
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getChannelShell()
    if m.top.request.params.id = invalid return invalid
    rsp = TwitchGraphQLRequest({
        operationName: "ChannelShell"
        variables: {
            login: m.top.request.params.id
        }
        extensions: {
            persistedQuery: {
                version: 1,
                sha256Hash: "580ab410bcd0c1ad194224957ae2241e5d252b2c5173d8e0cce9d32d5bb14efe"
            }
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function TwitchHelixApiRequest()
    ? "HelixAPIRequest"
    access_token = ""
    device_code = ""
    ' doubled up here in stead of defaulting to "" because access_token is dependent on device_code
    if get_user_setting("device_code") <> invalid
        device_code = get_user_setting("device_code")
        if get_user_setting("access_token") <> invalid
            access_token = "Bearer " + get_user_setting("access_token")
        end if
    end if
    requestParams = {
        url: "https://api.twitch.tv/helix/" + m.top.request.params.endpoint + "?" + m.top.request.params.args
        headers: {
            "Accept": "*/*"
            "Authorization": access_token
            "Client-Id": "ue6666qo983tsx6so1t0vnawi233wa"
            "Device-ID": device_code
            "Origin": "https://switch.tv.twitch.tv"
            "Referer": "https://switch.tv.twitch.tv/"
        }
        method: m.top.request.params.method
    }
    if m.top.request.params.data <> invalid
        requestParams["data"] = m.top.request.params.data
    end if
    req = HttpRequest(requestParams)
    rsp = ParseJSON(req.send())
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function


function followChannel() as object
    rsp = TwitchGraphQLRequest({
        operationName: "FollowButton_FollowUser",
        variables: {
            input: {
                disableNotifications: false,
                targetID: m.top.request.params.id
            }
        },
        extensions: {
            persistedQuery: {
                version: 1,
                sha256Hash: "800e7346bdf7e5278a3c1d3f21b2b56e2639928f86815677a7126b093b2fdd08"
            }
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getRecommendedSections() as object
    rsp = TwitchGraphQLRequest({
        operationName: "Shelves",
        variables: {
            "imageWidth": 50,
            "itemsPerRow": 3,
            "platform": "web",
            "limit": 8,
            "requestID": getRandomUUID(),
            "context": {
                "clientApp": "twilight",
                "location": "home",
                "referrerDomain": "twitch.tv",
                "viewportHeight": 1080,
                "viewportWidth": 1920
            },
            "verbose": false
        },
        extensions: {
            persistedQuery: {
                version: 1,
                sha256Hash: "b6f0c72c747457b73107f6aa00bd6a5bb294539d2de5398646e949c863662543"
            }
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function unfollowChannel() as object
    rsp = TwitchGraphQLRequest({
        operationName: "FollowButton_UnfollowUser",
        variables: {
            input: {
                targetID: m.top.request.params.id
            }
        },
        extensions: {
            persistedQuery: {
                version: 1,
                sha256Hash: "f7dae976ebf41c755ae2d758546bfd176b4eeb856656098bb40e0a672ca0d880"
            }
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function


function getBrowsePageQuery()
    variables = {
        "limit": 100,
        "options": {
            "recommendationsContext": {
                "platform": "web"
            },
            "requestID": "JIRA-VXP-2397",
            "sort": "VIEWER_COUNT",
            "tags": []
        }
    }
    if m.top.request.cursor <> invalid
        variables["cursor"] = m.top.request.cursor
    end if
    rsp = TwitchGraphQLRequest({
        "operationName": "BrowsePage_AllDirectories",
        "variables": variables
        "extensions": {
            "persistedQuery": {
                "version": 1,
                "sha256Hash": "1d1914ca3cbfaa607ecd5595b2e305e96acf987c8f25328f7713b25f604c4668"
            }
        }
    })
    if rsp <> invalid
        m.top.response = rsp
    else
        m.top.response = { "response": invalid }
    end if
    m.top.control = "STOP"
end function

function getTwitchBookmarks()
    rsp = TwitchGraphQLRequest({
        "operationName": "queryUserViewedVideo",
        "variables": {},
        "extensions": {
            "persistedQuery": {
                "version": 1,
                "sha256Hash": "e249447c070b095eb599cceec239bbca567e30080795789f85bc25db3f7a27ad"
            }
        }
    })
    if rsp?.data?.currentUser?.viewedVideos?.edges <> invalid
        videoBookmarks = {}
        for each edge in rsp.data.currentUser.viewedVideos.edges
            videoId = edge.node.id
            positionSecs = edge.history.position
            videoBookmarks[videoId] = Int(positionSecs).toStr()
        end for
        try
            set_user_setting("VideoBookmarks", FormatJson(videoBookmarks, 256))
        catch e
            ?"Error Saving Bookmarks "; e
        end try
    end if
    m.top.control = "STOP"
end function

function updateUserViewedVideo()
    rsp = TwitchGraphQLRequest({
        "operationName": "updateUserViewedVideo",
        "variables": {
            "input": {
                "userID": m.top.request.userId,
                "position": m.top.request.position,
                "videoID": m.top.request.videoId,
                "videoType": m.top.request.videoType 'LIVE or VOD
            }
        },
        "extensions": {
            "persistedQuery": {
                "version": 1,
                "sha256Hash": "bb58b1bd08a4ca0c61f2b8d323381a5f4cd39d763da8698f680ef1dfaea89ca1"
            }
        }
    })
    m.top.control = "STOP"
end function